import re
from datetime import datetime
import os
import pathlib

#files generated by
#https://pypi.org/project/memory-profiler/

#file structure // 1st num is memory in MiB and 2nd num is unix time
#CMDLINE c:\users\test\appdata\local\programs\python\python37\python.exe main.py
#MEM 2.121094 1683724595.3046
#MEM 23.656250 1683724595.4183
#...
#MEM 53.996094 1683724595.6379

peakMemory = 0
averageMemory = 0
totalTime = 0
startTime = 0
endTime = 0
i = 0

workDir  = pathlib.Path().resolve()

with open(str(workDir) + "\\" + "mprofile_20230510151635.dat", 'r') as f:
   for line in f:
      ListOfMemAndTime = re.findall(f"[0-9]+.[0-9]+", line)
      if ListOfMemAndTime != []: #skips the first line
            averageMemory += float(ListOfMemAndTime[0])
            totalTime += float(ListOfMemAndTime[1])
            if i == 1:
               startTime = ListOfMemAndTime[1]       
            if peakMemory < float(ListOfMemAndTime[0]):
               peakMemory = float(ListOfMemAndTime[0])
      i += 1
   endTime = ListOfMemAndTime[1]


print("----Memory----")
print("Average memory used: " + str(averageMemory/i) + " MiB")
print("Peak memory used: " + str(peakMemory) + " MiB")
print("----Time----")
print("Start time: " + datetime.utcfromtimestamp(float(startTime)).strftime('%Y-%m-%d %H:%M:%S'))
print("End time: " + datetime.utcfromtimestamp(float(endTime)).strftime('%Y-%m-%d %H:%M:%S'))
print("Total time used: " + datetime.utcfromtimestamp(float(endTime)-float(startTime)).strftime('%H:%M:%S'))